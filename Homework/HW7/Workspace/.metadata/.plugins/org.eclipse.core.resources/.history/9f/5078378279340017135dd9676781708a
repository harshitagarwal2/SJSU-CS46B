package mergesort;
import java.util.Arrays;

public class MergeSorter {
	private int[] array;
	
	public MergeSorter(int[] array){
		this.array=array;
	}
	
	public int[] sort(){
		mergeSortRecurse(array);
		return array;
	}
	
	private void mergeSortRecurse(int[] sortMe){
		int lengthArray = sortMe.length;
		if(lengthArray <= 1)
			return;
		int[] leftHalf = Arrays.copyOfRange(sortMe,0,lengthArray/2);
		int[] rightHalf = Arrays.copyOfRange(sortMe, lengthArray/2, lengthArray);
		
		mergeSortRecurse(leftHalf);
		mergeSortRecurse(rightHalf);
		
		if(leftHalf[0]<rightHalf[0]){
			//System.out.println(rightHalf[0]);
			int[] temp = leftHalf;
			leftHalf=rightHalf;
			rightHalf=temp;
		}
		/*System.out.println(rightHalf[0]);
		System.out.println(leftHalf[0]);
		*/
		
		merge(leftHalf,rightHalf,sortMe);
		
	}
	
	private void merge(int[] left,int[] right,int[] list){
		
		
		for(int i=0;i<left.length;i++){
			list[i]=left[i];
		}
		for(int i=0;i<right.length;i++){
			list[i+left.length]=right[i];
		}
	}
	
	
	
	public static void main(String[] args){
		int[] gg =  {7,1,6,8};
		MergeSorter hh = new MergeSorter(gg);
		int[] ii = hh.sort();
		for(int i=0;i<ii.length;i++){
			System.out.println(ii[i]);
		}
	}

}
